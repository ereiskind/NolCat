[
    {
        "op": "core/column-addition",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "baseColumnName": "Statistics_Source_ID",
        "expression": "grel:row.record.index",
        "onError": "set-to-blank",
        "newColumnName": "usage_data_ID",
        "columnInsertIndex": 0,
        "description": "Create column ``usage_data_ID`` containing row number"
    },
    {
        "op": "core/column-addition",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "baseColumnName": "ISBN",
        "expression": "grel:if(value==cells.Parent_ISBN.value,null,value)",
        "onError": "set-to-blank",
        "newColumnName": "dedupe_ISBN",
        "columnInsertIndex": 9,
        "description": "Create column ``dedupe_ISBN`` with the value from ``ISBN`` unless it's the same as the row's value in ``Parent_ISBN``"
    },
    {
        "op": "core/column-addition",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "baseColumnName": "Print_ISSN",
        "expression": "grel:if(value==cells.Parent_Print_ISSN.value,null,value)",
        "onError": "set-to-blank",
        "newColumnName": "dedupe_Print_ISSN",
        "columnInsertIndex": 9,
        "description": "Create column ``dedupe_Print_ISSN`` with the value from ``Print_ISSN`` unless it's the same as the row's value in ``Parent_Print_ISSN``"
    },
    {
        "op": "core/column-addition",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "baseColumnName": "Online_ISSN",
        "expression": "grel:if(value==cells.Parent_Online_ISSN.value,null,value)",
        "onError": "set-to-blank",
        "newColumnName": "dedupe_Online_ISSN",
        "columnInsertIndex": 9,
        "description": "Create column ``dedupe_Online_ISSN`` with the value from ``Online_ISSN`` unless it's the same as the row's value in ``Parent_Online_ISSN``"
    },
    {
        "op": "core/column-addition",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "baseColumnName": "Metric_Type",
        "expression": "join ([coalesce(cells['Metric_Type'].value,'`None`'),coalesce(cells['Usage_Date'].value,'`None`'),coalesce(cells['Usage_Count'].value,'`None`'),coalesce(cells['YOP'].value,'`None`'),coalesce(cells['Access_Type'].value,'`None`'),coalesce(cells['Access_Method'].value,'`None`'),coalesce(cells['Data_Type'].value,'`None`'),coalesce(cells['Section_Type'].value,'`None`')],']|[')",
        "onError": "keep-original",
        "newColumnName": "usageData",
        "columnInsertIndex": 20,
        "description": "Create column ``usageData`` combining the values of the following fields in the given order: ``Metric_Type``, ``Usage_Date``, ``Usage_Count``, ``YOP``, ``Access_Type``, ``Access_Method``, ``Data_Type``, ``Section_Type``"
    },
    {
        "op": "core/column-addition",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "baseColumnName": "Statistics_Source_ID",
        "expression": "join ([coalesce(cells['Publisher'].value,'`None`'),coalesce(cells['Publisher_ID'].value,'`None`'),coalesce(cells['Platform'].value,'`None`'),coalesce(cells['Proprietary_ID'].value,'`None`'),coalesce(cells['URI'].value,'`None`'),coalesce(cells['Publication_Date'].value,'`None`'),coalesce(cells['Article_Version'].value,'`None`'),coalesce(cells['Statistics_Source_ID'].value,'`None`')],']|[')",
        "onError": "keep-original",
        "newColumnName": "resourcePlatforms",
        "columnInsertIndex": 1,
        "description": "Create column ``resourcePlatforms`` combining the values of the following fields in the given order: ``Publisher``, ``Publisher_ID``, ``Platform``, ``Proprietary_ID``, ``URI``, ``Publication_Date``, ``Article_Version``, ``Statistics_Source_ID``"
    },
    {
        "op": "core/column-addition",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "baseColumnName": "Resource_Name",
        "expression": "join ([coalesce(cells['Resource_Name'].value,'`None`'),coalesce(cells['DOI'].value,'`None`'),coalesce(cells['ISBN'].value,'`None`'),coalesce(cells['Print_ISSN'].value,'`None`'),coalesce(cells['Online_ISSN'].value,'`None`'),coalesce(cells['Authors'].value,'`None`'),coalesce(cells['Parent_Title'].value,'`None`'),coalesce(cells['Parent_Authors'].value,'`None`'),coalesce(cells['Parent_Publication_Date'].value,'`None`'),coalesce(cells['Parent_Article_Version'].value,'`None`'),coalesce(cells['Parent_Data_Type'].value,'`None`'),coalesce(cells['Parent_DOI'].value,'`None`'),coalesce(cells['Parent_Proprietary_ID'].value,'`None`'),coalesce(cells['Parent_ISBN'].value,'`None`'),coalesce(cells['Parent_Print_ISSN'].value,'`None`'),coalesce(cells['Parent_Online_ISSN'].value,'`None`'),coalesce(cells['Parent_URI'].value,'`None`')],']|[')",
        "onError": "keep-original",
        "newColumnName": "resourceMetadata",
        "columnInsertIndex": 3,
        "description": "Create column ``resourceMetadata`` combining the values of the following fields in the given order: ``Resource_Name``, ``DOI``, ``ISBN``, ``Print_ISSN``, ``Online_ISSN``, ``Authors``, ``Parent_Title``, ``Parent_Authors``, ``Parent_Publication_Date``, ``Parent_Article_Version``, ``Parent_Data_Type``, ``Parent_DOI``, ``Parent_Proprietary_ID``, ``Parent_ISBN``, ``Parent_Print_ISSN``, ``Parent_Online_ISSN``, ``Parent_URI``"
    },
    {
        "op": "core/column-addition",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "baseColumnName": "Resource_Name",
        "expression": "join ([coalesce(cells['Resource_Name'].value,'`None`'),coalesce(cells['DOI'].value,'`None`'),coalesce(cells['dedupe_ISBN'].value,'`None`'),coalesce(cells['dedupe_Print_ISSN'].value,'`None`'),coalesce(cells['dedupe_Online_ISSN'].value,'`None`'),coalesce(cells['Authors'].value,'`None`'),coalesce(cells['Parent_Title'].value,'`None`'),coalesce(cells['Parent_Authors'].value,'`None`'),coalesce(cells['Parent_Publication_Date'].value,'`None`'),coalesce(cells['Parent_Article_Version'].value,'`None`'),coalesce(cells['Parent_Data_Type'].value,'`None`'),coalesce(cells['Parent_DOI'].value,'`None`'),coalesce(cells['Parent_Proprietary_ID'].value,'`None`'),coalesce(cells['Parent_ISBN'].value,'`None`'),coalesce(cells['Parent_Print_ISSN'].value,'`None`'),coalesce(cells['Parent_Online_ISSN'].value,'`None`'),coalesce(cells['Parent_URI'].value,'`None`')],']|[')",
        "onError": "keep-original",
        "newColumnName": "dedupe_resourceMetadata",
        "columnInsertIndex": 3,
        "description": "Create column ``dedupe_resourceMetadata`` combining the values of the following fields in the given order: ``Resource_Name``, ``DOI``, ``dedupe_ISBN``, ``dedupe_Print_ISSN``, ``dedupe_Online_ISSN``, ``Authors``, ``Parent_Title``, ``Parent_Authors``, ``Parent_Publication_Date``, ``Parent_Article_Version``, ``Parent_Data_Type``, ``Parent_DOI``, ``Parent_Proprietary_ID``, ``Parent_ISBN``, ``Parent_Print_ISSN``, ``Parent_Online_ISSN``, ``Parent_URI``"
    },
    {
        "op": "core/column-reorder",
        "columnNames": [
            "dedupe_resourceMetadata",
            "resourceMetadata",
            "usage_data_ID",
            "usageData",
            "resourcePlatforms"
        ],
        "description": "Reorder columns"
    },
    {
        "op": "core/column-addition",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "baseColumnName": "dedupe_resourceMetadata",
        "expression": "grel:if(length(value.split(\"]|[\"))==length(filter(value.split(\"]|[\"),value,value==\"`None`\")),cells.resourcePlatforms.value.split(\"]|[\")[2],value)",
        "onError": "set-to-blank",
        "newColumnName": "reorder_resourceMetadata",
        "columnInsertIndex": 0,
        "description": "Create column ``reorder_resourceMetadata`` with the value of column ``dedupe_resourceMetadata`` for non-platform resources and the name of the platform from platform resources"
    },
    {
        "op": "core/row-reorder",
        "mode": "row-based",
        "sorting": {
            "criteria": [
                {
                    "valueType": "string",
                    "column": "reorder_resourceMetadata",
                    "blankPosition": 2,
                    "errorPosition": 1,
                    "reverse": false,
                    "caseSensitive": false
                }
            ]
        },
        "description": "Reorder rows based on ``reorder_resourceMetadata``"
    },
    {
        "op": "core/blank-down",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "reorder_resourceMetadata",
        "description": "Blank down cells in column ``reorder_resourceMetadata``"
    },
    {
        "op": "core/multivalued-cell-join",
        "columnName": "resourcePlatforms",
        "keyColumnName": "reorder_resourceMetadata",
        "separator": "}|{",
        "description": "Combine all values in record in column ``resourcePlatforms`` in the first row of the record separated by `}|{`"
    },
    {
        "op": "core/multivalued-cell-join",
        "columnName": "usageData",
        "keyColumnName": "reorder_resourceMetadata",
        "separator": "}|{",
        "description": "Combine all values in record in column ``usageData`` in the first row of the record separated by `}|{`"
    },
    {
        "op": "core/multivalued-cell-join",
        "columnName": "usage_data_ID",
        "keyColumnName": "reorder_resourceMetadata",
        "separator": "}|{",
        "description": "Combine all values in record in column ``usage_data_ID`` in the first row of the record separated by `}|{`"
    },
    {
        "op": "core/row-removal",
        "engineConfig": {
            "facets": [
                {
                    "type": "list",
                    "name": "reorder_resourceMetadata",
                    "expression": "isBlank(value)",
                    "columnName": "reorder_resourceMetadata",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": true,
                                "l": "true"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                }
            ],
            "mode": "row-based"
        },
        "description": "Remove rows with no unique data"
    },
    {
        "op": "core/column-addition",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "baseColumnName": "reorder_resourceMetadata",
        "expression": "grel:row.record.index",
        "onError": "set-to-blank",
        "newColumnName": "temp_resource_ID_all",
        "columnInsertIndex": 1,
        "description": "Create column ``temp_resource_ID_all`` with record number"
    },
    {
        "op": "core/column-removal",
        "columnName": "reorder_resourceMetadata",
        "description": "Remove column ``reorder_resourceMetadata``"
    },
    {
        "op": "core/column-addition",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "baseColumnName": "dedupe_resourceMetadata",
        "expression": "grel:value.split(\"]|[\")[0]",
        "onError": "set-to-blank",
        "newColumnName": "reorder_resource_name",
        "columnInsertIndex": 0,
        "description": "Create column ``reorder_resource_name`` with resource name value"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "reorder_resource_name",
        "expression": "grel:if(value==\"`None`\",value+\"-\"+row.record.index,value)",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "Add row number to null value placeholders in ``reorder_resource_name``"
    },
    {
        "op": "core/column-addition",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "baseColumnName": "dedupe_resourceMetadata",
        "expression": "grel:value.split(\"]|[\")[1]",
        "onError": "set-to-blank",
        "newColumnName": "reorder_DOI",
        "columnInsertIndex": 1,
        "description": "Create column ``reorder_DOI`` with DOI"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "reorder_DOI",
        "expression": "grel:if(value==\"`None`\",value+\"-\"+row.record.index,value)",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "Add row number to null value placeholders in ``reorder_DOI``"
    },
    {
        "op": "core/column-addition",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "baseColumnName": "dedupe_resourceMetadata",
        "expression": "grel:value.split(\"]|[\")[2]",
        "onError": "set-to-blank",
        "newColumnName": "reorder_ISBN",
        "columnInsertIndex": 2,
        "description": "Create column ``reorder_ISBN`` with ISBN"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "reorder_ISBN",
        "expression": "grel:if(value==\"`None`\",value+\"-\"+row.record.index,value)",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "Add row number to null value placeholders in ``reorder_ISBN``"
    },
    {
        "op": "core/column-addition",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "baseColumnName": "dedupe_resourceMetadata",
        "expression": "grel:value.split(\"]|[\")[3]",
        "onError": "set-to-blank",
        "newColumnName": "reorder_print_ISSN",
        "columnInsertIndex": 3,
        "description": "Create column ``reorder_print_ISSN`` with print ISSN"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "reorder_print_ISSN",
        "expression": "grel:if(value==\"`None`\",value+\"-\"+row.record.index,value)",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "Add row number to null value placeholders in ``reorder_print_ISSN``"
    },
    {
        "op": "core/column-addition",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "baseColumnName": "dedupe_resourceMetadata",
        "expression": "grel:value.split(\"]|[\")[4]",
        "onError": "set-to-blank",
        "newColumnName": "reorder_online_ISSN",
        "columnInsertIndex": 4,
        "description": "Create column ``reorder_online_ISSN`` with online ISSN"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "reorder_online_ISSN",
        "expression": "grel:if(value==\"`None`\",value+\"-\"+row.record.index,value)",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "Add row number to null value placeholders in ``reorder_online_ISSN``"
    },
    {
        "op": "core/row-reorder",
        "mode": "record-based",
        "sorting": {
            "criteria": [
                {
                    "valueType": "string",
                    "column": "reorder_resource_name",
                    "blankPosition": 2,
                    "errorPosition": 1,
                    "reverse": false,
                    "caseSensitive": false
                }
            ]
        },
        "description": "Reorder rows based on ``reorder_resource_name``"
    },
    {
        "op": "core/blank-down",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "reorder_resource_name",
        "description": "Blank down cells in column ``reorder_resource_name``"
    },
    {
        "op": "core/column-addition",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "baseColumnName": "reorder_resource_name",
        "expression": "grel:if(isNotNull(value.match(/(`None`\\-\\d*)/)[0]),cells.temp_resource_ID_all.value+\"-x\",row.record.index)",
        "onError": "set-to-blank",
        "newColumnName": "temp_resource_ID_name",
        "columnInsertIndex": 6,
        "description": "Create column ``temp_resource_ID_name`` with the record number for non-null values and the row's ``temp_resource_ID_all`` value followed by `-x` for null placeholder values"
    },
    {
        "op": "core/column-removal",
        "columnName": "reorder_resource_name",
        "description": "Remove column ``reorder_resource_name``"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [
                {
                    "type": "list",
                    "name": "temp_resource_ID_name",
                    "expression": "grel:and(facetCount(value, 'value', 'temp_resource_ID_name') > 1,isNumeric(value))",
                    "columnName": "temp_resource_ID_name",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": false,
                                "l": "false"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                }
            ],
            "mode": "row-based"
        },
        "columnName": "temp_resource_ID_name",
        "expression": "grel:cells.temp_resource_ID_all.value+\"-x\"",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "Change all values not representing matches in column ``temp_resource_ID_name`` to the row's ``temp_resource_ID_all`` value followed by `-x`"
    },
    {
        "op": "core/row-reorder",
        "mode": "record-based",
        "sorting": {
            "criteria": [
                {
                    "valueType": "string",
                    "column": "reorder_DOI",
                    "blankPosition": 2,
                    "errorPosition": 1,
                    "reverse": false,
                    "caseSensitive": false
                }
            ]
        },
        "description": "Reorder rows based on ``reorder_DOI``"
    },
    {
        "op": "core/blank-down",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "reorder_DOI",
        "description": "Blank down cells in column ``reorder_DOI``"
    },
    {
        "op": "core/column-addition",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "baseColumnName": "reorder_DOI",
        "expression": "grel:if(isNotNull(value.match(/(`None`\\-\\d*)/)[0]),cells.temp_resource_ID_all.value+\"-x\",row.record.index)",
        "onError": "set-to-blank",
        "newColumnName": "temp_resource_ID_DOI",
        "columnInsertIndex": 6,
        "description": "Create column ``temp_resource_ID_DOI`` with the record number for non-null values and the row's ``temp_resource_ID_all`` value followed by `-x` for null placeholder values"
    },
    {
        "op": "core/column-removal",
        "columnName": "reorder_DOI",
        "description": "Remove column ``reorder_DOI``"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [
                {
                    "type": "list",
                    "name": "temp_resource_ID_DOI",
                    "expression": "grel:and(facetCount(value, 'value', 'temp_resource_ID_DOI') > 1,isNumeric(value))",
                    "columnName": "temp_resource_ID_DOI",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": false,
                                "l": "false"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                }
            ],
            "mode": "row-based"
        },
        "columnName": "temp_resource_ID_DOI",
        "expression": "grel:cells.temp_resource_ID_all.value+\"-x\"",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "Change all values not representing matches in column ``temp_resource_ID_DOI`` to the row's ``temp_resource_ID_all`` value followed by `-x`"
    },
    {
        "op": "core/row-reorder",
        "mode": "record-based",
        "sorting": {
            "criteria": [
                {
                    "valueType": "string",
                    "column": "reorder_ISBN",
                    "blankPosition": 2,
                    "errorPosition": 1,
                    "reverse": false,
                    "caseSensitive": false
                }
            ]
        },
        "description": "Reorder rows based on ``reorder_ISBN``"
    },
    {
        "op": "core/blank-down",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "reorder_ISBN",
        "description": "Blank down cells in column ``reorder_ISBN``"
    },
    {
        "op": "core/column-addition",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "baseColumnName": "reorder_ISBN",
        "expression": "grel:if(isNotNull(value.match(/(`None`\\-\\d*)/)[0]),cells.temp_resource_ID_all.value+\"-x\",row.record.index)",
        "onError": "set-to-blank",
        "newColumnName": "temp_resource_ID_ISBN",
        "columnInsertIndex": 6,
        "description": "Create column ``temp_resource_ID_ISBN`` with the record number for non-null values and the row's ``temp_resource_ID_all`` value followed by `-x` for null placeholder values"
    },
    {
        "op": "core/column-removal",
        "columnName": "reorder_ISBN",
        "description": "Remove column ``reorder_ISBN``"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [
                {
                    "type": "list",
                    "name": "temp_resource_ID_ISBN",
                    "expression": "grel:and(facetCount(value, 'value', 'temp_resource_ID_ISBN') > 1,isNumeric(value))",
                    "columnName": "temp_resource_ID_ISBN",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": false,
                                "l": "false"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                }
            ],
            "mode": "row-based"
        },
        "columnName": "temp_resource_ID_ISBN",
        "expression": "grel:cells.temp_resource_ID_all.value+\"-x\"",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "Change all values not representing matches in column ``temp_resource_ID_ISBN`` to the row's ``temp_resource_ID_all`` value followed by `-x`"
    },
    {
        "op": "core/row-reorder",
        "mode": "record-based",
        "sorting": {
            "criteria": [
                {
                    "valueType": "string",
                    "column": "reorder_print_ISSN",
                    "blankPosition": 2,
                    "errorPosition": 1,
                    "reverse": false,
                    "caseSensitive": false
                }
            ]
        },
        "description": "Reorder rows based on ``reorder_print_ISSN``"
    },
    {
        "op": "core/blank-down",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "reorder_print_ISSN",
        "description": "Blank down cells in column ``reorder_print_ISSN``"
    },
    {
        "op": "core/column-addition",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "baseColumnName": "reorder_print_ISSN",
        "expression": "grel:if(isNotNull(value.match(/(`None`\\-\\d*)/)[0]),cells.temp_resource_ID_all.value+\"-x\",row.record.index)",
        "onError": "set-to-blank",
        "newColumnName": "temp_resource_ID_ISSN",
        "columnInsertIndex": 6,
        "description": "Create column ``temp_resource_ID_ISSN`` with the record number for non-null values and the row's ``temp_resource_ID_all`` value followed by `-x` for null placeholder values"
    },
    {
        "op": "core/column-removal",
        "columnName": "reorder_print_ISSN",
        "description": "Remove column ``reorder_print_ISSN``"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [
                {
                    "type": "list",
                    "name": "temp_resource_ID_ISSN",
                    "expression": "grel:and(facetCount(value, 'value', 'temp_resource_ID_ISSN') > 1,isNumeric(value))",
                    "columnName": "temp_resource_ID_ISSN",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": false,
                                "l": "false"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                }
            ],
            "mode": "row-based"
        },
        "columnName": "temp_resource_ID_ISSN",
        "expression": "grel:cells.temp_resource_ID_all.value+\"-x\"",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "Change all values not representing matches in column ``temp_resource_ID_ISSN`` to the row's ``temp_resource_ID_all`` value followed by `-x`"
    },
    {
        "op": "core/row-reorder",
        "mode": "record-based",
        "sorting": {
            "criteria": [
                {
                    "valueType": "string",
                    "column": "reorder_online_ISSN",
                    "blankPosition": 2,
                    "errorPosition": 1,
                    "reverse": false,
                    "caseSensitive": false
                }
            ]
        },
        "description": "Reorder rows based on ``reorder_online_ISSN``"
    },
    {
        "op": "core/blank-down",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "reorder_online_ISSN",
        "description": "Blank down cells in column ``reorder_online_ISSN``"
    },
    {
        "op": "core/column-addition",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "baseColumnName": "reorder_online_ISSN",
        "expression": "grel:if(isNotNull(value.match(/(`None`\\-\\d*)/)[0]),cells.temp_resource_ID_all.value+\"-x\",row.record.index)",
        "onError": "set-to-blank",
        "newColumnName": "temp_resource_ID_eISSN",
        "columnInsertIndex": 6,
        "description": "Create column ``temp_resource_ID_eISSN`` with the record number for non-null values and the row's ``temp_resource_ID_all`` value followed by `-x` for null placeholder values"
    },
    {
        "op": "core/column-removal",
        "columnName": "reorder_online_ISSN",
        "description": "Remove column ``reorder_online_ISSN``"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [
                {
                    "type": "list",
                    "name": "temp_resource_ID_eISSN",
                    "expression": "grel:and(facetCount(value, 'value', 'temp_resource_ID_eISSN') > 1,isNumeric(value))",
                    "columnName": "temp_resource_ID_eISSN",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": false,
                                "l": "false"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                }
            ],
            "mode": "row-based"
        },
        "columnName": "temp_resource_ID_eISSN",
        "expression": "grel:cells.temp_resource_ID_all.value+\"-x\"",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "Change all values not representing matches in column ``temp_resource_ID_eISSN`` to the row's ``temp_resource_ID_all`` value followed by `-x`"
    },
    {
        "op": "core/column-reorder",
        "columnNames": [
            "temp_resource_ID_DOI",
            "temp_resource_ID_ISBN",
            "temp_resource_ID_ISSN",
            "temp_resource_ID_eISSN",
            "temp_resource_ID_name",
            "temp_resource_ID_all",
            "dedupe_resourceMetadata",
            "resourceMetadata",
            "usage_data_ID",
            "usageData",
            "resourcePlatforms"
        ],
        "description": "Reorder columns"
    },
    {
        "op": "core/column-removal",
        "columnName": "temp_resource_ID_DOI",
        "description": "Because there aren't any duplicates to be found, remove column ``temp_resource_ID_DOI``"
    },
    {
        "op": "core/row-reorder",
        "mode": "row-based",
        "sorting": {
            "criteria": [
                {
                    "valueType": "number",
                    "column": "temp_resource_ID_ISBN",
                    "blankPosition": 2,
                    "errorPosition": 1,
                    "reverse": false
                }
            ]
        },
        "description": "Reorder rows based on ``temp_resource_ID_ISBN``"
    },
    {
        "op": "core/blank-down",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "temp_resource_ID_ISBN",
        "description": "Blank down cells in column ``temp_resource_ID_ISBN``"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [
                {
                    "type": "list",
                    "name": "resourceMetadata",
                    "expression": "value",
                    "columnName": "resourceMetadata",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": "Encyclopedia of Philosophy 2nd ed. vol. 2]|[`None`]|[978-0-0286-6072-1]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`",
                                "l": "Encyclopedia of Philosophy 2nd ed. vol. 2]|[`None`]|[978-0-0286-6072-1]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                }
            ],
            "mode": "row-based"
        },
        "columnName": "temp_resource_ID_ISBN",
        "expression": "grel:cells.temp_resource_ID_all.value+\"-x\"",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "Change value in column ``temp_resource_ID_ISBN`` that doesn't belong in match to the row's ``temp_resource_ID_all`` value followed by `-x`"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [
                {
                    "type": "list",
                    "name": "temp_resource_ID_ISBN",
                    "expression": "isBlank(value)",
                    "columnName": "temp_resource_ID_ISBN",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": true,
                                "l": "true"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                }
            ],
            "mode": "record-based"
        },
        "columnName": "temp_resource_ID_ISSN",
        "expression": "grel:if(length(filter(row.record.cells[\"temp_resource_ID_ISSN\"].value,v,isNumeric(v)))>1,if(length(filter(row.record.cells[\"temp_resource_ID_ISSN\"].value,v,v==row.record.cells[\"temp_resource_ID_ISSN\"].value[0]))==length(row.record.cells[\"temp_resource_ID_ISSN\"].value),if(row.index-row.record.fromRowIndex==0,row.record.cells[\"temp_resource_ID_ISSN\"].value[0],cells.temp_resource_ID_all.value+\"-x\"),if(row.index-row.record.fromRowIndex==0,forEach(row.record.cells[\"temp_resource_ID_ISSN\"].value,v,v).join(\"|\"),cells.temp_resource_ID_all.value+\"-x\")),if(and(length(filter(row.record.cells[\"temp_resource_ID_ISSN\"].value,v,isNumeric(v)))==1,row.index-row.record.fromRowIndex==0),filter(row.record.cells[\"temp_resource_ID_ISSN\"].value,v,isNumeric(v))[0],cells.temp_resource_ID_all.value+\"-x\"))",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "If column ``temp_resource_ID_ISSN`` has numbers indicating a duplicate value, preserve them in the first row of the record; otherwise, change them to the row's ``temp_resource_ID_all`` value followed by `-x`"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [
                {
                    "type": "list",
                    "name": "temp_resource_ID_ISBN",
                    "expression": "isBlank(value)",
                    "columnName": "temp_resource_ID_ISBN",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": true,
                                "l": "true"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                }
            ],
            "mode": "record-based"
        },
        "columnName": "temp_resource_ID_eISSN",
        "expression": "grel:if(length(filter(row.record.cells[\"temp_resource_ID_eISSN\"].value,v,isNumeric(v)))>1,if(length(filter(row.record.cells[\"temp_resource_ID_eISSN\"].value,v,v==row.record.cells[\"temp_resource_ID_eISSN\"].value[0]))==length(row.record.cells[\"temp_resource_ID_eISSN\"].value),if(row.index-row.record.fromRowIndex==0,row.record.cells[\"temp_resource_ID_eISSN\"].value[0],cells.temp_resource_ID_all.value+\"-x\"),if(row.index-row.record.fromRowIndex==0,forEach(row.record.cells[\"temp_resource_ID_eISSN\"].value,v,v).join(\"|\"),cells.temp_resource_ID_all.value+\"-x\")),if(and(length(filter(row.record.cells[\"temp_resource_ID_eISSN\"].value,v,isNumeric(v)))==1,row.index-row.record.fromRowIndex==0),filter(row.record.cells[\"temp_resource_ID_eISSN\"].value,v,isNumeric(v))[0],cells.temp_resource_ID_all.value+\"-x\"))",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "If column ``temp_resource_ID_eISSN`` has numbers indicating a duplicate value, preserve them in the first row of the record; otherwise, change them to the row's ``temp_resource_ID_all`` value followed by `-x`"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [
                {
                    "type": "list",
                    "name": "temp_resource_ID_ISBN",
                    "expression": "isBlank(value)",
                    "columnName": "temp_resource_ID_ISBN",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": true,
                                "l": "true"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                }
            ],
            "mode": "record-based"
        },
        "columnName": "temp_resource_ID_name",
        "expression": "grel:if(length(filter(row.record.cells[\"temp_resource_ID_name\"].value,v,isNumeric(v)))>1,if(length(filter(row.record.cells[\"temp_resource_ID_name\"].value,v,v==row.record.cells[\"temp_resource_ID_name\"].value[0]))==length(row.record.cells[\"temp_resource_ID_name\"].value),if(row.index-row.record.fromRowIndex==0,row.record.cells[\"temp_resource_ID_name\"].value[0],cells.temp_resource_ID_all.value+\"-x\"),if(row.index-row.record.fromRowIndex==0,forEach(row.record.cells[\"temp_resource_ID_name\"].value,v,v).join(\"|\"),cells.temp_resource_ID_all.value+\"-x\")),if(and(length(filter(row.record.cells[\"temp_resource_ID_name\"].value,v,isNumeric(v)))==1,row.index-row.record.fromRowIndex==0),filter(row.record.cells[\"temp_resource_ID_name\"].value,v,isNumeric(v))[0],cells.temp_resource_ID_all.value+\"-x\"))",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "If column ``temp_resource_ID_name`` has numbers indicating a duplicate value, preserve them in the first row of the record; otherwise, change them to the row's ``temp_resource_ID_all`` value followed by `-x`"
    },
    {
        "op": "core/multivalued-cell-join",
        "columnName": "temp_resource_ID_all",
        "keyColumnName": "temp_resource_ID_ISBN",
        "separator": "}||{",
        "description": "Combine all values in record in column ``temp_resource_ID_all`` in the first row of the record separated by `}||{`"
    },
    {
        "op": "core/multivalued-cell-join",
        "columnName": "dedupe_resourceMetadata",
        "keyColumnName": "temp_resource_ID_ISBN",
        "separator": "}||{",
        "description": "Combine all values in record in column ``dedupe_resourceMetadata`` in the first row of the record separated by `}||{`"
    },
    {
        "op": "core/multivalued-cell-join",
        "columnName": "resourceMetadata",
        "keyColumnName": "temp_resource_ID_ISBN",
        "separator": "}||{",
        "description": "Combine all values in record in column ``resourceMetadata`` in the first row of the record separated by `}||{`"
    },
    {
        "op": "core/multivalued-cell-join",
        "columnName": "dedupe_resourceMetadata",
        "keyColumnName": "temp_resource_ID_ISBN",
        "separator": "}||{",
        "description": "Combine all values in record in column ``dedupe_resourceMetadata`` in the first row of the record separated by `}||{`"
    },
    {
        "op": "core/multivalued-cell-join",
        "columnName": "usage_data_ID",
        "keyColumnName": "temp_resource_ID_ISBN",
        "separator": "}||{",
        "description": "Combine all values in record in column ``usage_data_ID`` in the first row of the record separated by `}||{`"
    },
    {
        "op": "core/multivalued-cell-join",
        "columnName": "usageData",
        "keyColumnName": "temp_resource_ID_ISBN",
        "separator": "}||{",
        "description": "Combine all values in record in column ``usageData`` in the first row of the record separated by `}||{`"
    },
    {
        "op": "core/multivalued-cell-join",
        "columnName": "resourcePlatforms",
        "keyColumnName": "temp_resource_ID_ISBN",
        "separator": "}||{",
        "description": "Combine all values in record in column ``resourcePlatforms`` in the first row of the record separated by `}||{`"
    },
    {
        "op": "core/row-removal",
        "engineConfig": {
            "facets": [
                {
                    "type": "list",
                    "name": "temp_resource_ID_ISBN",
                    "expression": "isBlank(value)",
                    "columnName": "temp_resource_ID_ISBN",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": true,
                                "l": "true"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                },
                {
                    "type": "list",
                    "name": "temp_resource_ID_ISSN",
                    "expression": "grel:value.endsWith(\"-x\")",
                    "columnName": "temp_resource_ID_ISSN",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": true,
                                "l": "true"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                },
                {
                    "type": "list",
                    "name": "temp_resource_ID_eISSN",
                    "expression": "grel:value.endsWith(\"-x\")",
                    "columnName": "temp_resource_ID_eISSN",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": true,
                                "l": "true"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                },
                {
                    "type": "list",
                    "name": "temp_resource_ID_name",
                    "expression": "grel:value.endsWith(\"-x\")",
                    "columnName": "temp_resource_ID_name",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": true,
                                "l": "true"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                }
            ],
            "mode": "row-based"
        },
        "description": "Remove rows with no metadata"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [
                {
                    "type": "list",
                    "name": "temp_resource_ID_ISBN",
                    "expression": "isBlank(value)",
                    "columnName": "temp_resource_ID_ISBN",
                    "invert": true,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": true,
                                "l": "true"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                }
            ],
            "mode": "record-based"
        },
        "columnName": "temp_resource_ID_ISBN",
        "expression": "grel:cells.temp_resource_ID_all.value+\"-x\"",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "If column ``temp_resource_ID_ISBN`` doesn't have multiple records due to different ISSN, eISSN, or name IDs, change the value to the row's ``temp_resource_ID_all`` value followed by `-x`"
    },
    {
        "op": "core/column-reorder",
        "columnNames": [
            "temp_resource_ID_ISSN",
            "temp_resource_ID_eISSN",
            "temp_resource_ID_name",
            "temp_resource_ID_ISBN",
            "temp_resource_ID_all",
            "resourceMetadata",
            "dedupe_resourceMetadata",
            "usage_data_ID",
            "usageData",
            "resourcePlatforms"
        ],
        "description": "Reorder columns"
    },
    {
        "op": "core/row-reorder",
        "mode": "row-based",
        "sorting": {
            "criteria": [
                {
                    "valueType": "number",
                    "column": "temp_resource_ID_ISSN",
                    "blankPosition": 2,
                    "errorPosition": 1,
                    "reverse": false
                }
            ]
        },
        "description": "Reorder rows based on ``temp_resource_ID_ISSN``"
    },
    {
        "op": "core/blank-down",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "temp_resource_ID_ISSN",
        "description": "Blank down cells in column ``temp_resource_ID_ISSN``"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [
                {
                    "type": "list",
                    "name": "temp_resource_ID_ISSN",
                    "expression": "isBlank(value)",
                    "columnName": "temp_resource_ID_ISSN",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": true,
                                "l": "true"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                }
            ],
            "mode": "record-based"
        },
        "columnName": "temp_resource_ID_eISSN",
        "expression": "grel:if(length(filter(row.record.cells[\"temp_resource_ID_eISSN\"].value,v,isNumeric(v)))>1,if(length(filter(row.record.cells[\"temp_resource_ID_eISSN\"].value,v,v==row.record.cells[\"temp_resource_ID_eISSN\"].value[0]))==length(row.record.cells[\"temp_resource_ID_eISSN\"].value),if(row.index-row.record.fromRowIndex==0,row.record.cells[\"temp_resource_ID_eISSN\"].value[0],cells.temp_resource_ID_all.value+\"-x\"),if(row.index-row.record.fromRowIndex==0,forEach(row.record.cells[\"temp_resource_ID_eISSN\"].value,v,v).join(\"|\"),cells.temp_resource_ID_all.value+\"-x\")),if(and(length(filter(row.record.cells[\"temp_resource_ID_eISSN\"].value,v,isNumeric(v)))==1,row.index-row.record.fromRowIndex==0),filter(row.record.cells[\"temp_resource_ID_eISSN\"].value,v,isNumeric(v))[0],cells.temp_resource_ID_all.value+\"-x\"))",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "If column ``temp_resource_ID_eISSN`` has numbers indicating a duplicate value, preserve them in the first row of the record; otherwise, change them to the row's ``temp_resource_ID_all`` value followed by `-x`"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [
                {
                    "type": "list",
                    "name": "temp_resource_ID_ISSN",
                    "expression": "isBlank(value)",
                    "columnName": "temp_resource_ID_ISSN",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": true,
                                "l": "true"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                }
            ],
            "mode": "record-based"
        },
        "columnName": "temp_resource_ID_name",
        "expression": "grel:if(length(filter(row.record.cells[\"temp_resource_ID_name\"].value,v,isNumeric(v)))>1,if(length(filter(row.record.cells[\"temp_resource_ID_name\"].value,v,v==row.record.cells[\"temp_resource_ID_name\"].value[0]))==length(row.record.cells[\"temp_resource_ID_name\"].value),if(row.index-row.record.fromRowIndex==0,row.record.cells[\"temp_resource_ID_name\"].value[0],cells.temp_resource_ID_all.value+\"-x\"),if(row.index-row.record.fromRowIndex==0,forEach(row.record.cells[\"temp_resource_ID_name\"].value,v,v).join(\"|\"),cells.temp_resource_ID_all.value+\"-x\")),if(and(length(filter(row.record.cells[\"temp_resource_ID_name\"].value,v,isNumeric(v)))==1,row.index-row.record.fromRowIndex==0),filter(row.record.cells[\"temp_resource_ID_name\"].value,v,isNumeric(v))[0],cells.temp_resource_ID_all.value+\"-x\"))",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "If column ``temp_resource_ID_name`` has numbers indicating a duplicate value, preserve them in the first row of the record; otherwise, change them to the row's ``temp_resource_ID_all`` value followed by `-x`"
    },
    {
        "op": "core/multivalued-cell-join",
        "columnName": "temp_resource_ID_all",
        "keyColumnName": "temp_resource_ID_ISSN",
        "separator": "}|||{",
        "description": "Combine all values in record in column ``temp_resource_ID_all`` in the first row of the record separated by `}|||{`"
    },
    {
        "op": "core/multivalued-cell-join",
        "columnName": "dedupe_resourceMetadata",
        "keyColumnName": "temp_resource_ID_ISSN",
        "separator": "}|||{",
        "description": "Combine all values in record in column ``dedupe_resourceMetadata`` in the first row of the record separated by `}|||{`"
    },
    {
        "op": "core/multivalued-cell-join",
        "columnName": "resourceMetadata",
        "keyColumnName": "temp_resource_ID_ISSN",
        "separator": "}|||{",
        "description": "Combine all values in record in column ``resourceMetadata`` in the first row of the record separated by `}|||{`"
    },
    {
        "op": "core/multivalued-cell-join",
        "columnName": "dedupe_resourceMetadata",
        "keyColumnName": "temp_resource_ID_ISSN",
        "separator": "}|||{",
        "description": "Combine all values in record in column ``dedupe_resourceMetadata`` in the first row of the record separated by `}|||{`"
    },
    {
        "op": "core/multivalued-cell-join",
        "columnName": "usage_data_ID",
        "keyColumnName": "temp_resource_ID_ISSN",
        "separator": "}|||{",
        "description": "Combine all values in record in column ``usage_data_ID`` in the first row of the record separated by `}|||{`"
    },
    {
        "op": "core/multivalued-cell-join",
        "columnName": "usageData",
        "keyColumnName": "temp_resource_ID_ISSN",
        "separator": "}|||{",
        "description": "Combine all values in record in column ``usageData`` in the first row of the record separated by `}|||{`"
    },
    {
        "op": "core/multivalued-cell-join",
        "columnName": "resourcePlatforms",
        "keyColumnName": "temp_resource_ID_ISSN",
        "separator": "}|||{",
        "description": "Combine all values in record in column ``resourcePlatforms`` in the first row of the record separated by `}|||{`"
    },
    {
        "op": "core/row-removal",
        "engineConfig": {
            "facets": [
                {
                    "type": "list",
                    "name": "temp_resource_ID_ISSN",
                    "expression": "isBlank(value)",
                    "columnName": "temp_resource_ID_ISSN",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": true,
                                "l": "true"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                },
                {
                    "type": "list",
                    "name": "temp_resource_ID_eISSN",
                    "expression": "grel:value.endsWith(\"-x\")",
                    "columnName": "temp_resource_ID_eISSN",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": true,
                                "l": "true"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                },
                {
                    "type": "list",
                    "name": "temp_resource_ID_name",
                    "expression": "grel:value.endsWith(\"-x\")",
                    "columnName": "temp_resource_ID_name",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": true,
                                "l": "true"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                }
            ],
            "mode": "row-based"
        },
        "description": "Remove rows with no metadata"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [
                {
                    "type": "list",
                    "name": "temp_resource_ID_ISSN",
                    "expression": "isBlank(value)",
                    "columnName": "temp_resource_ID_ISSN",
                    "invert": true,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": true,
                                "l": "true"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                }
            ],
            "mode": "record-based"
        },
        "columnName": "temp_resource_ID_ISSN",
        "expression": "grel:cells.temp_resource_ID_all.value+\"-x\"",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "If column ``temp_resource_ID_ISSN`` doesn't have multiple records due to different eISSN or name IDs, change the value to the row's ``temp_resource_ID_all`` value followed by `-x`"
    },
    {
        "op": "core/column-reorder",
        "columnNames": [
            "temp_resource_ID_name",
            "temp_resource_ID_ISBN",
            "temp_resource_ID_ISSN",
            "temp_resource_ID_all",
            "resourceMetadata",
            "dedupe_resourceMetadata",
            "usage_data_ID",
            "usageData",
            "resourcePlatforms"
        ],
        "description": "Because there aren't any duplicates to be found, remove column ``temp_resource_ID_eISSN`` as part of reordering columns"
    },
    {
        "op": "core/row-reorder",
        "mode": "row-based",
        "sorting": {
            "criteria": [
                {
                    "valueType": "number",
                    "column": "temp_resource_ID_name",
                    "blankPosition": 2,
                    "errorPosition": 1,
                    "reverse": false
                }
            ]
        },
        "description": "Reorder rows based on ``temp_resource_ID_name``"
    },
    {
        "op": "core/blank-down",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "temp_resource_ID_name",
        "description": "Blank down cells in column ``temp_resource_ID_name``"
    },
    {
        "op": "core/multivalued-cell-join",
        "columnName": "temp_resource_ID_all",
        "keyColumnName": "temp_resource_ID_name",
        "separator": "}||||{",
        "description": "Combine all values in record in column ``temp_resource_ID_all`` in the first row of the record separated by `}||||{`"
    },
    {
        "op": "core/multivalued-cell-join",
        "columnName": "dedupe_resourceMetadata",
        "keyColumnName": "temp_resource_ID_name",
        "separator": "}||||{",
        "description": "Combine all values in record in column ``dedupe_resourceMetadata`` in the first row of the record separated by `}||||{`"
    },
    {
        "op": "core/multivalued-cell-join",
        "columnName": "resourceMetadata",
        "keyColumnName": "temp_resource_ID_name",
        "separator": "}||||{",
        "description": "Combine all values in record in column ``resourceMetadata`` in the first row of the record separated by `}||||{`"
    },
    {
        "op": "core/multivalued-cell-join",
        "columnName": "dedupe_resourceMetadata",
        "keyColumnName": "temp_resource_ID_name",
        "separator": "}||||{",
        "description": "Combine all values in record in column ``dedupe_resourceMetadata`` in the first row of the record separated by `}||||{`"
    },
    {
        "op": "core/multivalued-cell-join",
        "columnName": "usage_data_ID",
        "keyColumnName": "temp_resource_ID_name",
        "separator": "}||||{",
        "description": "Combine all values in record in column ``usage_data_ID`` in the first row of the record separated by `}||||{`"
    },
    {
        "op": "core/multivalued-cell-join",
        "columnName": "usageData",
        "keyColumnName": "temp_resource_ID_name",
        "separator": "}||||{",
        "description": "Combine all values in record in column ``usageData`` in the first row of the record separated by `}||||{`"
    },
    {
        "op": "core/multivalued-cell-join",
        "columnName": "resourcePlatforms",
        "keyColumnName": "temp_resource_ID_name",
        "separator": "}||||{",
        "description": "Combine all values in record in column ``resourcePlatforms`` in the first row of the record separated by `}||||{`"
    },
    {
        "op": "core/row-removal",
        "engineConfig": {
            "facets": [
                {
                    "type": "list",
                    "name": "temp_resource_ID_name",
                    "expression": "isBlank(value)",
                    "columnName": "temp_resource_ID_name",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": true,
                                "l": "true"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                },
                {
                    "type": "list",
                    "name": "temp_resource_ID_ISSN",
                    "expression": "grel:value.endsWith(\"-x\")",
                    "columnName": "temp_resource_ID_ISSN",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": true,
                                "l": "true"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                },
                {
                    "type": "list",
                    "name": "temp_resource_ID_ISBN",
                    "expression": "grel:value.endsWith(\"-x\")",
                    "columnName": "temp_resource_ID_ISBN",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": true,
                                "l": "true"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                }
            ],
            "mode": "row-based"
        },
        "description": "Remove rows with no metadata"
    },
    {
        "op": "core/column-reorder",
        "columnNames": [
            "usage_data_ID",
            "resourceMetadata",
            "resourcePlatforms",
            "usageData"
        ],
        "description": "Reorder columns"
    },
    {
        "op": "core/column-addition",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "baseColumnName": "usage_data_ID",
        "expression": "grel:forEach(value.replace(/\\}\\|+\\{/,\"|\").split(\"|\"),x,x.toNumber()).sort()[0]",
        "onError": "set-to-blank",
        "newColumnName": "first_appearance",
        "columnInsertIndex": 0,
        "description": "Create column ``first_appearance`` with the first usage_data_ID value for each resource"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [
                {
                    "type": "list",
                    "name": "resourceMetadata",
                    "expression": "value",
                    "columnName": "resourceMetadata",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": "Early European Books->Collection 1]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`",
                                "l": "Early European Books->Collection 1]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`"
                            }
                        },
                        {
                            "v": {
                                "v": "Early European Books Collection 1]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`",
                                "l": "Early European Books Collection 1]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                }
            ],
            "mode": "record-based"
        },
        "columnName": "first_appearance",
        "expression": "grel:\"a\"",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "For records representing EEBO Collection 1, change the value in column ``first_appearance`` to `a`"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [
                {
                    "type": "list",
                    "name": "resourceMetadata",
                    "expression": "value",
                    "columnName": "resourceMetadata",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": "Early European Books Collection 10]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`",
                                "l": "Early European Books Collection 10]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`"
                            }
                        },
                        {
                            "v": {
                                "v": "Early European Books->Collection 10]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`",
                                "l": "Early European Books->Collection 10]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                }
            ],
            "mode": "record-based"
        },
        "columnName": "first_appearance",
        "expression": "grel:\"b\"",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "For records representing EEBO Collection 10, change the value in column ``first_appearance`` to `b`"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [
                {
                    "type": "list",
                    "name": "resourceMetadata",
                    "expression": "value",
                    "columnName": "resourceMetadata",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": "Social Science Premium Collection->Education Collection->ERIC]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`",
                                "l": "Social Science Premium Collection->Education Collection->ERIC]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`"
                            }
                        },
                        {
                            "v": {
                                "v": "ProQuest Social Sciences Premium Collection->ERIC]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`",
                                "l": "ProQuest Social Sciences Premium Collection->ERIC]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`"
                            }
                        },
                        {
                            "v": {
                                "v": "ERIC (Module)]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`",
                                "l": "ERIC (Module)]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`"
                            }
                        },
                        {
                            "v": {
                                "v": "ERIC]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`",
                                "l": "ERIC]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                }
            ],
            "mode": "record-based"
        },
        "columnName": "first_appearance",
        "expression": "grel:\"c\"",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "For records representing ERIC, change the value in column ``first_appearance`` to `c`"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [
                {
                    "type": "list",
                    "name": "resourceMetadata",
                    "expression": "value",
                    "columnName": "resourceMetadata",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": "Library Calendar]|[`None`]|[`None`]|[0190-8286]|[`None`]|[`None`]|[The Washington Post]|[`None`]|[`None`]|[`None`]|[Newspaper_or_Newsletter]|[`None`]|[ProQuest:10327]|[`None`]|[0190-8286]|[`None`]|[`None`",
                                "l": "Library Calendar]|[`None`]|[`None`]|[0190-8286]|[`None`]|[`None`]|[The Washington Post]|[`None`]|[`None`]|[`None`]|[Newspaper_or_Newsletter]|[`None`]|[ProQuest:10327]|[`None`]|[0190-8286]|[`None`]|[`None`"
                            }
                        },
                        {
                            "v": {
                                "v": "LIBRARY CALENDAR]|[`None`]|[`None`]|[0190-8286]|[`None`]|[`None`]|[The Washington Post]|[`None`]|[`None`]|[`None`]|[Newspaper_or_Newsletter]|[`None`]|[ProQuest:10327]|[`None`]|[0190-8286]|[`None`]|[`None`",
                                "l": "LIBRARY CALENDAR]|[`None`]|[`None`]|[0190-8286]|[`None`]|[`None`]|[The Washington Post]|[`None`]|[`None`]|[`None`]|[Newspaper_or_Newsletter]|[`None`]|[ProQuest:10327]|[`None`]|[0190-8286]|[`None`]|[`None`"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                }
            ],
            "mode": "record-based"
        },
        "columnName": "first_appearance",
        "expression": "grel:\"d\"",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "For records representing Library Calendar, change the value in column ``first_appearance`` to `d`"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [
                {
                    "type": "list",
                    "name": "resourceMetadata",
                    "expression": "value",
                    "columnName": "resourceMetadata",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": "Library Journal]|[`None`]|[`None`]|[0363-0277]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`}||||{Library Journal]|[`None`]|[`None`]|[`None`]|[0363-0277]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`",
                                "l": "Library Journal]|[`None`]|[`None`]|[0363-0277]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`}||||{Library Journal]|[`None`]|[`None`]|[`None`]|[0363-0277]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`"
                            }
                        },
                        {
                            "v": {
                                "v": "Library journal]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`",
                                "l": "Library journal]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                }
            ],
            "mode": "record-based"
        },
        "columnName": "first_appearance",
        "expression": "grel:\"e\"",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "For records representing Library Journal, change the value in column ``first_appearance`` to `e`"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [
                {
                    "type": "list",
                    "name": "resourceMetadata",
                    "expression": "value",
                    "columnName": "resourceMetadata",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": "NATION IN BRIEF]|[`None`]|[`None`]|[0190-8286]|[`None`]|[`None`]|[The Washington Post]|[`None`]|[`None`]|[`None`]|[Newspaper_or_Newsletter]|[`None`]|[ProQuest:10327]|[`None`]|[0190-8286]|[`None`]|[`None`",
                                "l": "NATION IN BRIEF]|[`None`]|[`None`]|[0190-8286]|[`None`]|[`None`]|[The Washington Post]|[`None`]|[`None`]|[`None`]|[Newspaper_or_Newsletter]|[`None`]|[ProQuest:10327]|[`None`]|[0190-8286]|[`None`]|[`None`"
                            }
                        },
                        {
                            "v": {
                                "v": "NATION In Brief]|[`None`]|[`None`]|[0190-8286]|[`None`]|[`None`]|[The Washington Post]|[`None`]|[`None`]|[`None`]|[Newspaper_or_Newsletter]|[`None`]|[ProQuest:10327]|[`None`]|[0190-8286]|[`None`]|[`None`",
                                "l": "NATION In Brief]|[`None`]|[`None`]|[0190-8286]|[`None`]|[`None`]|[The Washington Post]|[`None`]|[`None`]|[`None`]|[Newspaper_or_Newsletter]|[`None`]|[ProQuest:10327]|[`None`]|[0190-8286]|[`None`]|[`None`"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                }
            ],
            "mode": "record-based"
        },
        "columnName": "first_appearance",
        "expression": "grel:\"f\"",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "For records representing Nation in Brief, change the value in column ``first_appearance`` to `f`"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [
                {
                    "type": "list",
                    "name": "resourceMetadata",
                    "expression": "value",
                    "columnName": "resourceMetadata",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": "The Yellow Wallpaper]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`",
                                "l": "The Yellow Wallpaper]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`"
                            }
                        },
                        {
                            "v": {
                                "v": "The yellow wallpaper]|[`None`]|[978-0-585-15016-1]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`",
                                "l": "The yellow wallpaper]|[`None`]|[978-0-585-15016-1]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`"
                            }
                        },
                        {
                            "v": {
                                "v": "Yellow Wallpaper]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`}||||{Yellow Wallpaper]|[`None`]|[978-1-77651-048-1]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`",
                                "l": "Yellow Wallpaper]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`}||||{Yellow Wallpaper]|[`None`]|[978-1-77651-048-1]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`"
                            }
                        },
                        {
                            "v": {
                                "v": "The yellow wallpaper]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`",
                                "l": "The yellow wallpaper]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`]|[`None`"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                }
            ],
            "mode": "record-based"
        },
        "columnName": "first_appearance",
        "expression": "grel:\"g\"",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "For records representing Yellow Wallpaper, change the value in column ``first_appearance`` to `g`"
    },
    {
        "op": "core/row-reorder",
        "mode": "record-based",
        "sorting": {
            "criteria": [
                {
                    "valueType": "string",
                    "column": "first_appearance",
                    "blankPosition": 2,
                    "errorPosition": 1,
                    "reverse": false,
                    "caseSensitive": false
                }
            ]
        },
        "description": "Reorder rows based on ``first_appearance``"
    },
    {
        "op": "core/blank-down",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "first_appearance",
        "description": "Blank down cells in column ``first_appearance``"
    },
    {
        "op": "core/multivalued-cell-join",
        "columnName": "usage_data_ID",
        "keyColumnName": "first_appearance",
        "separator": "}|||||{",
        "description": "Combine all values in record in column ``usage_data_ID`` in the first row of the record separated by `}|||||{`"
    },
    {
        "op": "core/multivalued-cell-join",
        "columnName": "resourceMetadata",
        "keyColumnName": "first_appearance",
        "separator": "}|||||{",
        "description": "Combine all values in record in column ``resourceMetadata`` in the first row of the record separated by `}|||||{`"
    },
    {
        "op": "core/multivalued-cell-join",
        "columnName": "resourcePlatforms",
        "keyColumnName": "first_appearance",
        "separator": "}|||||{",
        "description": "Combine all values in record in column ``resourcePlatforms`` in the first row of the record separated by `}|||||{`"
    },
    {
        "op": "core/multivalued-cell-join",
        "columnName": "usageData",
        "keyColumnName": "first_appearance",
        "separator": "}|||||{",
        "description": "Combine all values in record in column ``usageData`` in the first row of the record separated by `}|||||{`"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "columnName": "first_appearance",
        "expression": "grel:forEach(cells.usage_data_ID.value.replace(/\\}\\|+\\{/,\"|\").split(\"|\"),x,x.toNumber()).sort()[0]",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "Update values in column ``first_appearance`` based on finalized groupings"
    },
    {
        "op": "core/row-reorder",
        "mode": "record-based",
        "sorting": {
            "criteria": [
                {
                    "valueType": "number",
                    "column": "first_appearance",
                    "blankPosition": 2,
                    "errorPosition": 1,
                    "reverse": false
                }
            ]
        },
        "description": "Reorder rows based on ``first_appearance``"
    },
    {
        "op": "core/column-addition",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "baseColumnName": "first_appearance",
        "expression": "grel:row.record.index",
        "onError": "set-to-blank",
        "newColumnName": "resource_ID",
        "columnInsertIndex": 0,
        "description": "Create column ``resource_ID`` with the resource ID value"
    },
    {
        "op": "core/column-removal",
        "columnName": "first_appearance",
        "description": "Remove column ``first_appearance``"
    },
    {
        "op": "core/column-addition",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "baseColumnName": "usage_data_ID",
        "expression": "grel:value",
        "onError": "set-to-blank",
        "newColumnName": "temp_usage_data_ID",
        "columnInsertIndex": 1,
        "description": "Create column ``temp_usage_data_ID`` as duplicate of column ``usage_data_ID``"
    },
    {
        "op": "core/multivalued-cell-split",
        "columnName": "temp_usage_data_ID",
        "keyColumnName": "resource_ID",
        "mode": "separator",
        "separator": "\\}\\|\\|+\\{",
        "regex": true,
        "description": "Divide values in column ``temp_usage_data_ID`` into new rows at inverted curly braces with multiple pipes between them"
    },
    {
        "op": "core/multivalued-cell-split",
        "columnName": "resourceMetadata",
        "keyColumnName": "resource_ID",
        "mode": "separator",
        "separator": "\\}\\|\\|+\\{",
        "regex": true,
        "description": "Divide values in column ``resourceMetadata`` into new rows at inverted curly braces with multiple pipes between them"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "columnName": "temp_usage_data_ID",
        "expression": "grel:value.split(\"}|{\").length()",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "Get number of IDs in each cell of column ``temp_usage_data_ID``"
    },
    {
        "op": "core/column-rename",
        "oldColumnName": "temp_usage_data_ID",
        "newColumnName": "usage_data_record_count",
        "description": "Rename column ``temp_usage_data_ID`` to ``usage_data_record_count``"
    },
    {
        "op": "core/column-split",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "columnName": "resourceMetadata",
        "guessCellType": false,
        "removeOriginalColumn": true,
        "mode": "separator",
        "separator": "]|[",
        "regex": false,
        "maxColumns": 0,
        "description": "Split column ``resourceMetadata`` into new columns at each `]|[`"
    },
    {
        "op": "core/column-rename",
        "oldColumnName": "resourceMetadata 1",
        "newColumnName": "Resource_Name",
        "description": "Rename column ``resourceMetadata 1`` to ``Resource_Name``"
    },
    {
        "op": "core/column-rename",
        "oldColumnName": "resourceMetadata 2",
        "newColumnName": "DOI",
        "description": "Rename column ``resourceMetadata 2`` to ``DOI``"
    },
    {
        "op": "core/column-rename",
        "oldColumnName": "resourceMetadata 3",
        "newColumnName": "ISBN",
        "description": "Rename column ``resourceMetadata 3`` to ``ISBN``"
    },
    {
        "op": "core/column-rename",
        "oldColumnName": "resourceMetadata 4",
        "newColumnName": "Print_ISSN",
        "description": "Rename column ``resourceMetadata 4`` to ``Print_ISSN``"
    },
    {
        "op": "core/column-rename",
        "oldColumnName": "resourceMetadata 5",
        "newColumnName": "Online_ISSN",
        "description": "Rename column ``resourceMetadata 5`` to ``Online_ISSN``"
    },
    {
        "op": "core/column-rename",
        "oldColumnName": "resourceMetadata 6",
        "newColumnName": "Authors",
        "description": "Rename column ``resourceMetadata 6`` to ``Authors``"
    },
    {
        "op": "core/column-rename",
        "oldColumnName": "resourceMetadata 7",
        "newColumnName": "Parent_Title",
        "description": "Rename column ``resourceMetadata 7`` to ``Parent_Title``"
    },
    {
        "op": "core/column-rename",
        "oldColumnName": "resourceMetadata 8",
        "newColumnName": "Parent_Authors",
        "description": "Rename column ``resourceMetadata 8`` to ``Parent_Authors``"
    },
    {
        "op": "core/column-rename",
        "oldColumnName": "resourceMetadata 9",
        "newColumnName": "Parent_Publication_Date",
        "description": "Rename column ``resourceMetadata 9`` to ``Parent_Publication_Date``"
    },
    {
        "op": "core/column-rename",
        "oldColumnName": "resourceMetadata 10",
        "newColumnName": "Parent_Article_Version",
        "description": "Rename column ``resourceMetadata 10`` to ``Parent_Article_Version``"
    },
    {
        "op": "core/column-rename",
        "oldColumnName": "resourceMetadata 11",
        "newColumnName": "Parent_Data_Type",
        "description": "Rename column ``resourceMetadata 11`` to ``Parent_Data_Type``"
    },
    {
        "op": "core/column-rename",
        "oldColumnName": "resourceMetadata 12",
        "newColumnName": "Parent_DOI",
        "description": "Rename column ``resourceMetadata 12`` to ``Parent_DOI``"
    },
    {
        "op": "core/column-rename",
        "oldColumnName": "resourceMetadata 13",
        "newColumnName": "Parent_Proprietary_ID",
        "description": "Rename column ``resourceMetadata 13`` to ``Parent_Proprietary_ID``"
    },
    {
        "op": "core/column-rename",
        "oldColumnName": "resourceMetadata 14",
        "newColumnName": "Parent_ISBN",
        "description": "Rename column ``resourceMetadata 14`` to ``Parent_ISBN``"
    },
    {
        "op": "core/column-rename",
        "oldColumnName": "resourceMetadata 15",
        "newColumnName": "Parent_Print_ISSN",
        "description": "Rename column ``resourceMetadata 15`` to ``Parent_Print_ISSN``"
    },
    {
        "op": "core/column-rename",
        "oldColumnName": "resourceMetadata 16",
        "newColumnName": "Parent_Online_ISSN",
        "description": "Rename column ``resourceMetadata 16`` to ``Parent_Online_ISSN``"
    },
    {
        "op": "core/column-rename",
        "oldColumnName": "resourceMetadata 17",
        "newColumnName": "Parent_URI",
        "description": "Rename column ``resourceMetadata 17`` to ``Parent_URI``"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "columnName": "Resource_Name",
        "expression": "grel:if(row.record.cells[\"Resource_Name\"].value.inArray(\"`None`\"),if(row.record.cells[\"Resource_Name\"].value.uniques().length()==1,null,if(filter(row.record.cells[\"Resource_Name\"].value,value,value!=\"`None`\").uniques().length()==filter(row.record.cells[\"Resource_Name\"].value,value,value!=\"`None`\").length(),if(forEach(filter(forEachIndex(row.record.cells[\"Resource_Name\"].value,i,inner_value,inner_value+\"|\"+row.record.cells[\"usage_data_record_count\"].value[i]),filter_value,filter_value.split(\"|\")[0]!=\"`None`\"),outer_value,outer_value.split(\"|\")[1].toNumber()).sort()[-1]==row.record.cells[\"usage_data_record_count\"].value[row.index-row.record.fromRowIndex],value+\"|default\",if(value==\"`None`\",null,value)),value+\"*\")),if(row.record.cells[\"Resource_Name\"].value.uniques().length()==1,forEach(row.record.cells[\"Resource_Name\"].value,value,if(row.index-row.record.fromRowIndex==0,value+\"|default\",null))[0],if(filter(row.record.cells[\"Resource_Name\"].value,value,value!=\"`None`\").uniques().length()==filter(row.record.cells[\"Resource_Name\"].value,value,value!=\"`None`\").length(),if(forEach(filter(forEachIndex(row.record.cells[\"Resource_Name\"].value,i,inner_value,inner_value+\"|\"+row.record.cells[\"usage_data_record_count\"].value[i]),filter_value,filter_value.split(\"|\")[0]!=\"`None`\"),outer_value,outer_value.split(\"|\")[1].toNumber()).sort()[-1]==row.record.cells[\"usage_data_record_count\"].value[row.index-row.record.fromRowIndex],value+\"|default\",value),value+\"*\")))",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "Mark defaults and change null placeholders to null values in column ``Resource_Name`` in records that don't have multiple rows with the same metadata value"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "columnName": "DOI",
        "expression": "grel:if(row.record.cells[\"DOI\"].value.inArray(\"`None`\"),if(row.record.cells[\"DOI\"].value.uniques().length()==1,null,if(filter(row.record.cells[\"DOI\"].value,value,value!=\"`None`\").uniques().length()==filter(row.record.cells[\"DOI\"].value,value,value!=\"`None`\").length(),if(forEach(filter(forEachIndex(row.record.cells[\"DOI\"].value,i,inner_value,inner_value+\"|\"+row.record.cells[\"usage_data_record_count\"].value[i]),filter_value,filter_value.split(\"|\")[0]!=\"`None`\"),outer_value,outer_value.split(\"|\")[1].toNumber()).sort()[-1]==row.record.cells[\"usage_data_record_count\"].value[row.index-row.record.fromRowIndex],value+\"|default\",if(value==\"`None`\",null,value)),value+\"*\")),if(row.record.cells[\"DOI\"].value.uniques().length()==1,forEach(row.record.cells[\"DOI\"].value,value,if(row.index-row.record.fromRowIndex==0,value+\"|default\",null))[0],if(filter(row.record.cells[\"DOI\"].value,value,value!=\"`None`\").uniques().length()==filter(row.record.cells[\"DOI\"].value,value,value!=\"`None`\").length(),if(forEach(filter(forEachIndex(row.record.cells[\"DOI\"].value,i,inner_value,inner_value+\"|\"+row.record.cells[\"usage_data_record_count\"].value[i]),filter_value,filter_value.split(\"|\")[0]!=\"`None`\"),outer_value,outer_value.split(\"|\")[1].toNumber()).sort()[-1]==row.record.cells[\"usage_data_record_count\"].value[row.index-row.record.fromRowIndex],value+\"|default\",value),value+\"*\")))",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "Mark defaults and change null placeholders to null values in column ``DOI`` in records that don't have multiple rows with the same metadata value"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "columnName": "ISBN",
        "expression": "grel:if(row.record.cells[\"ISBN\"].value.inArray(\"`None`\"),if(row.record.cells[\"ISBN\"].value.uniques().length()==1,null,if(filter(row.record.cells[\"ISBN\"].value,value,value!=\"`None`\").uniques().length()==filter(row.record.cells[\"ISBN\"].value,value,value!=\"`None`\").length(),if(forEach(filter(forEachIndex(row.record.cells[\"ISBN\"].value,i,inner_value,inner_value+\"|\"+row.record.cells[\"usage_data_record_count\"].value[i]),filter_value,filter_value.split(\"|\")[0]!=\"`None`\"),outer_value,outer_value.split(\"|\")[1].toNumber()).sort()[-1]==row.record.cells[\"usage_data_record_count\"].value[row.index-row.record.fromRowIndex],value+\"|default\",if(value==\"`None`\",null,value)),value+\"*\")),if(row.record.cells[\"ISBN\"].value.uniques().length()==1,forEach(row.record.cells[\"ISBN\"].value,value,if(row.index-row.record.fromRowIndex==0,value+\"|default\",null))[0],if(filter(row.record.cells[\"ISBN\"].value,value,value!=\"`None`\").uniques().length()==filter(row.record.cells[\"ISBN\"].value,value,value!=\"`None`\").length(),if(forEach(filter(forEachIndex(row.record.cells[\"ISBN\"].value,i,inner_value,inner_value+\"|\"+row.record.cells[\"usage_data_record_count\"].value[i]),filter_value,filter_value.split(\"|\")[0]!=\"`None`\"),outer_value,outer_value.split(\"|\")[1].toNumber()).sort()[-1]==row.record.cells[\"usage_data_record_count\"].value[row.index-row.record.fromRowIndex],value+\"|default\",value),value+\"*\")))",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "Mark defaults and change null placeholders to null values in column ``ISBN`` in records that don't have multiple rows with the same metadata value"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "columnName": "Print_ISSN",
        "expression": "grel:if(row.record.cells[\"Print_ISSN\"].value.inArray(\"`None`\"),if(row.record.cells[\"Print_ISSN\"].value.uniques().length()==1,null,if(filter(row.record.cells[\"Print_ISSN\"].value,value,value!=\"`None`\").uniques().length()==filter(row.record.cells[\"Print_ISSN\"].value,value,value!=\"`None`\").length(),if(forEach(filter(forEachIndex(row.record.cells[\"Print_ISSN\"].value,i,inner_value,inner_value+\"|\"+row.record.cells[\"usage_data_record_count\"].value[i]),filter_value,filter_value.split(\"|\")[0]!=\"`None`\"),outer_value,outer_value.split(\"|\")[1].toNumber()).sort()[-1]==row.record.cells[\"usage_data_record_count\"].value[row.index-row.record.fromRowIndex],value+\"|default\",if(value==\"`None`\",null,value)),value+\"*\")),if(row.record.cells[\"Print_ISSN\"].value.uniques().length()==1,forEach(row.record.cells[\"Print_ISSN\"].value,value,if(row.index-row.record.fromRowIndex==0,value+\"|default\",null))[0],if(filter(row.record.cells[\"Print_ISSN\"].value,value,value!=\"`None`\").uniques().length()==filter(row.record.cells[\"Print_ISSN\"].value,value,value!=\"`None`\").length(),if(forEach(filter(forEachIndex(row.record.cells[\"Print_ISSN\"].value,i,inner_value,inner_value+\"|\"+row.record.cells[\"usage_data_record_count\"].value[i]),filter_value,filter_value.split(\"|\")[0]!=\"`None`\"),outer_value,outer_value.split(\"|\")[1].toNumber()).sort()[-1]==row.record.cells[\"usage_data_record_count\"].value[row.index-row.record.fromRowIndex],value+\"|default\",value),value+\"*\")))",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "Mark defaults and change null placeholders to null values in column ``Print_ISSN`` in records that don't have multiple rows with the same metadata value"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "columnName": "Online_ISSN",
        "expression": "grel:if(row.record.cells[\"Online_ISSN\"].value.inArray(\"`None`\"),if(row.record.cells[\"Online_ISSN\"].value.uniques().length()==1,null,if(filter(row.record.cells[\"Online_ISSN\"].value,value,value!=\"`None`\").uniques().length()==filter(row.record.cells[\"Online_ISSN\"].value,value,value!=\"`None`\").length(),if(forEach(filter(forEachIndex(row.record.cells[\"Online_ISSN\"].value,i,inner_value,inner_value+\"|\"+row.record.cells[\"usage_data_record_count\"].value[i]),filter_value,filter_value.split(\"|\")[0]!=\"`None`\"),outer_value,outer_value.split(\"|\")[1].toNumber()).sort()[-1]==row.record.cells[\"usage_data_record_count\"].value[row.index-row.record.fromRowIndex],value+\"|default\",if(value==\"`None`\",null,value)),value+\"*\")),if(row.record.cells[\"Online_ISSN\"].value.uniques().length()==1,forEach(row.record.cells[\"Online_ISSN\"].value,value,if(row.index-row.record.fromRowIndex==0,value+\"|default\",null))[0],if(filter(row.record.cells[\"Online_ISSN\"].value,value,value!=\"`None`\").uniques().length()==filter(row.record.cells[\"Online_ISSN\"].value,value,value!=\"`None`\").length(),if(forEach(filter(forEachIndex(row.record.cells[\"Online_ISSN\"].value,i,inner_value,inner_value+\"|\"+row.record.cells[\"usage_data_record_count\"].value[i]),filter_value,filter_value.split(\"|\")[0]!=\"`None`\"),outer_value,outer_value.split(\"|\")[1].toNumber()).sort()[-1]==row.record.cells[\"usage_data_record_count\"].value[row.index-row.record.fromRowIndex],value+\"|default\",value),value+\"*\")))",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "Mark defaults and change null placeholders to null values in column ``Online_ISSN`` in records that don't have multiple rows with the same metadata value"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "columnName": "Authors",
        "expression": "grel:if(row.record.cells[\"Authors\"].value.inArray(\"`None`\"),if(row.record.cells[\"Authors\"].value.uniques().length()==1,null,if(filter(row.record.cells[\"Authors\"].value,value,value!=\"`None`\").uniques().length()==filter(row.record.cells[\"Authors\"].value,value,value!=\"`None`\").length(),if(forEach(filter(forEachIndex(row.record.cells[\"Authors\"].value,i,inner_value,inner_value+\"|\"+row.record.cells[\"usage_data_record_count\"].value[i]),filter_value,filter_value.split(\"|\")[0]!=\"`None`\"),outer_value,outer_value.split(\"|\")[1].toNumber()).sort()[-1]==row.record.cells[\"usage_data_record_count\"].value[row.index-row.record.fromRowIndex],value+\"|default\",if(value==\"`None`\",null,value)),value+\"*\")),if(row.record.cells[\"Authors\"].value.uniques().length()==1,forEach(row.record.cells[\"Authors\"].value,value,if(row.index-row.record.fromRowIndex==0,value+\"|default\",null))[0],if(filter(row.record.cells[\"Authors\"].value,value,value!=\"`None`\").uniques().length()==filter(row.record.cells[\"Authors\"].value,value,value!=\"`None`\").length(),if(forEach(filter(forEachIndex(row.record.cells[\"Authors\"].value,i,inner_value,inner_value+\"|\"+row.record.cells[\"usage_data_record_count\"].value[i]),filter_value,filter_value.split(\"|\")[0]!=\"`None`\"),outer_value,outer_value.split(\"|\")[1].toNumber()).sort()[-1]==row.record.cells[\"usage_data_record_count\"].value[row.index-row.record.fromRowIndex],value+\"|default\",value),value+\"*\")))",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "Mark defaults and change null placeholders to null values in column ``Authors`` in records that don't have multiple rows with the same metadata value"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "columnName": "Parent_Title",
        "expression": "grel:if(row.record.cells[\"Parent_Title\"].value.inArray(\"`None`\"),if(row.record.cells[\"Parent_Title\"].value.uniques().length()==1,null,if(filter(row.record.cells[\"Parent_Title\"].value,value,value!=\"`None`\").uniques().length()==filter(row.record.cells[\"Parent_Title\"].value,value,value!=\"`None`\").length(),if(forEach(filter(forEachIndex(row.record.cells[\"Parent_Title\"].value,i,inner_value,inner_value+\"|\"+row.record.cells[\"usage_data_record_count\"].value[i]),filter_value,filter_value.split(\"|\")[0]!=\"`None`\"),outer_value,outer_value.split(\"|\")[1].toNumber()).sort()[-1]==row.record.cells[\"usage_data_record_count\"].value[row.index-row.record.fromRowIndex],value+\"|default\",if(value==\"`None`\",null,value)),value+\"*\")),if(row.record.cells[\"Parent_Title\"].value.uniques().length()==1,forEach(row.record.cells[\"Parent_Title\"].value,value,if(row.index-row.record.fromRowIndex==0,value+\"|default\",null))[0],if(filter(row.record.cells[\"Parent_Title\"].value,value,value!=\"`None`\").uniques().length()==filter(row.record.cells[\"Parent_Title\"].value,value,value!=\"`None`\").length(),if(forEach(filter(forEachIndex(row.record.cells[\"Parent_Title\"].value,i,inner_value,inner_value+\"|\"+row.record.cells[\"usage_data_record_count\"].value[i]),filter_value,filter_value.split(\"|\")[0]!=\"`None`\"),outer_value,outer_value.split(\"|\")[1].toNumber()).sort()[-1]==row.record.cells[\"usage_data_record_count\"].value[row.index-row.record.fromRowIndex],value+\"|default\",value),value+\"*\")))",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "Mark defaults and change null placeholders to null values in column ``Parent_Title`` in records that don't have multiple rows with the same metadata value"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "columnName": "Parent_Authors",
        "expression": "grel:if(row.record.cells[\"Parent_Authors\"].value.inArray(\"`None`\"),if(row.record.cells[\"Parent_Authors\"].value.uniques().length()==1,null,if(filter(row.record.cells[\"Parent_Authors\"].value,value,value!=\"`None`\").uniques().length()==filter(row.record.cells[\"Parent_Authors\"].value,value,value!=\"`None`\").length(),if(forEach(filter(forEachIndex(row.record.cells[\"Parent_Authors\"].value,i,inner_value,inner_value+\"|\"+row.record.cells[\"usage_data_record_count\"].value[i]),filter_value,filter_value.split(\"|\")[0]!=\"`None`\"),outer_value,outer_value.split(\"|\")[1].toNumber()).sort()[-1]==row.record.cells[\"usage_data_record_count\"].value[row.index-row.record.fromRowIndex],value+\"|default\",if(value==\"`None`\",null,value)),value+\"*\")),if(row.record.cells[\"Parent_Authors\"].value.uniques().length()==1,forEach(row.record.cells[\"Parent_Authors\"].value,value,if(row.index-row.record.fromRowIndex==0,value+\"|default\",null))[0],if(filter(row.record.cells[\"Parent_Authors\"].value,value,value!=\"`None`\").uniques().length()==filter(row.record.cells[\"Parent_Authors\"].value,value,value!=\"`None`\").length(),if(forEach(filter(forEachIndex(row.record.cells[\"Parent_Authors\"].value,i,inner_value,inner_value+\"|\"+row.record.cells[\"usage_data_record_count\"].value[i]),filter_value,filter_value.split(\"|\")[0]!=\"`None`\"),outer_value,outer_value.split(\"|\")[1].toNumber()).sort()[-1]==row.record.cells[\"usage_data_record_count\"].value[row.index-row.record.fromRowIndex],value+\"|default\",value),value+\"*\")))",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "Mark defaults and change null placeholders to null values in column ``Parent_Authors`` in records that don't have multiple rows with the same metadata value"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "columnName": "Parent_Publication_Date",
        "expression": "grel:if(row.record.cells[\"Parent_Publication_Date\"].value.inArray(\"`None`\"),if(row.record.cells[\"Parent_Publication_Date\"].value.uniques().length()==1,null,if(filter(row.record.cells[\"Parent_Publication_Date\"].value,value,value!=\"`None`\").uniques().length()==filter(row.record.cells[\"Parent_Publication_Date\"].value,value,value!=\"`None`\").length(),if(forEach(filter(forEachIndex(row.record.cells[\"Parent_Publication_Date\"].value,i,inner_value,inner_value+\"|\"+row.record.cells[\"usage_data_record_count\"].value[i]),filter_value,filter_value.split(\"|\")[0]!=\"`None`\"),outer_value,outer_value.split(\"|\")[1].toNumber()).sort()[-1]==row.record.cells[\"usage_data_record_count\"].value[row.index-row.record.fromRowIndex],value+\"|default\",if(value==\"`None`\",null,value)),value+\"*\")),if(row.record.cells[\"Parent_Publication_Date\"].value.uniques().length()==1,forEach(row.record.cells[\"Parent_Publication_Date\"].value,value,if(row.index-row.record.fromRowIndex==0,value+\"|default\",null))[0],if(filter(row.record.cells[\"Parent_Publication_Date\"].value,value,value!=\"`None`\").uniques().length()==filter(row.record.cells[\"Parent_Publication_Date\"].value,value,value!=\"`None`\").length(),if(forEach(filter(forEachIndex(row.record.cells[\"Parent_Publication_Date\"].value,i,inner_value,inner_value+\"|\"+row.record.cells[\"usage_data_record_count\"].value[i]),filter_value,filter_value.split(\"|\")[0]!=\"`None`\"),outer_value,outer_value.split(\"|\")[1].toNumber()).sort()[-1]==row.record.cells[\"usage_data_record_count\"].value[row.index-row.record.fromRowIndex],value+\"|default\",value),value+\"*\")))",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "Mark defaults and change null placeholders to null values in column ``Parent_Publication_Date`` in records that don't have multiple rows with the same metadata value"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "columnName": "Parent_Article_Version",
        "expression": "grel:if(row.record.cells[\"Parent_Article_Version\"].value.inArray(\"`None`\"),if(row.record.cells[\"Parent_Article_Version\"].value.uniques().length()==1,null,if(filter(row.record.cells[\"Parent_Article_Version\"].value,value,value!=\"`None`\").uniques().length()==filter(row.record.cells[\"Parent_Article_Version\"].value,value,value!=\"`None`\").length(),if(forEach(filter(forEachIndex(row.record.cells[\"Parent_Article_Version\"].value,i,inner_value,inner_value+\"|\"+row.record.cells[\"usage_data_record_count\"].value[i]),filter_value,filter_value.split(\"|\")[0]!=\"`None`\"),outer_value,outer_value.split(\"|\")[1].toNumber()).sort()[-1]==row.record.cells[\"usage_data_record_count\"].value[row.index-row.record.fromRowIndex],value+\"|default\",if(value==\"`None`\",null,value)),value+\"*\")),if(row.record.cells[\"Parent_Article_Version\"].value.uniques().length()==1,forEach(row.record.cells[\"Parent_Article_Version\"].value,value,if(row.index-row.record.fromRowIndex==0,value+\"|default\",null))[0],if(filter(row.record.cells[\"Parent_Article_Version\"].value,value,value!=\"`None`\").uniques().length()==filter(row.record.cells[\"Parent_Article_Version\"].value,value,value!=\"`None`\").length(),if(forEach(filter(forEachIndex(row.record.cells[\"Parent_Article_Version\"].value,i,inner_value,inner_value+\"|\"+row.record.cells[\"usage_data_record_count\"].value[i]),filter_value,filter_value.split(\"|\")[0]!=\"`None`\"),outer_value,outer_value.split(\"|\")[1].toNumber()).sort()[-1]==row.record.cells[\"usage_data_record_count\"].value[row.index-row.record.fromRowIndex],value+\"|default\",value),value+\"*\")))",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "Mark defaults and change null placeholders to null values in column ``Parent_Article_Version`` in records that don't have multiple rows with the same metadata value"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "columnName": "Parent_Data_Type",
        "expression": "grel:if(row.record.cells[\"Parent_Data_Type\"].value.inArray(\"`None`\"),if(row.record.cells[\"Parent_Data_Type\"].value.uniques().length()==1,null,if(filter(row.record.cells[\"Parent_Data_Type\"].value,value,value!=\"`None`\").uniques().length()==filter(row.record.cells[\"Parent_Data_Type\"].value,value,value!=\"`None`\").length(),if(forEach(filter(forEachIndex(row.record.cells[\"Parent_Data_Type\"].value,i,inner_value,inner_value+\"|\"+row.record.cells[\"usage_data_record_count\"].value[i]),filter_value,filter_value.split(\"|\")[0]!=\"`None`\"),outer_value,outer_value.split(\"|\")[1].toNumber()).sort()[-1]==row.record.cells[\"usage_data_record_count\"].value[row.index-row.record.fromRowIndex],value+\"|default\",if(value==\"`None`\",null,value)),value+\"*\")),if(row.record.cells[\"Parent_Data_Type\"].value.uniques().length()==1,forEach(row.record.cells[\"Parent_Data_Type\"].value,value,if(row.index-row.record.fromRowIndex==0,value+\"|default\",null))[0],if(filter(row.record.cells[\"Parent_Data_Type\"].value,value,value!=\"`None`\").uniques().length()==filter(row.record.cells[\"Parent_Data_Type\"].value,value,value!=\"`None`\").length(),if(forEach(filter(forEachIndex(row.record.cells[\"Parent_Data_Type\"].value,i,inner_value,inner_value+\"|\"+row.record.cells[\"usage_data_record_count\"].value[i]),filter_value,filter_value.split(\"|\")[0]!=\"`None`\"),outer_value,outer_value.split(\"|\")[1].toNumber()).sort()[-1]==row.record.cells[\"usage_data_record_count\"].value[row.index-row.record.fromRowIndex],value+\"|default\",value),value+\"*\")))",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "Mark defaults and change null placeholders to null values in column ``Parent_Data_Type`` in records that don't have multiple rows with the same metadata value"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "columnName": "Parent_DOI",
        "expression": "grel:if(row.record.cells[\"Parent_DOI\"].value.inArray(\"`None`\"),if(row.record.cells[\"Parent_DOI\"].value.uniques().length()==1,null,if(filter(row.record.cells[\"Parent_DOI\"].value,value,value!=\"`None`\").uniques().length()==filter(row.record.cells[\"Parent_DOI\"].value,value,value!=\"`None`\").length(),if(forEach(filter(forEachIndex(row.record.cells[\"Parent_DOI\"].value,i,inner_value,inner_value+\"|\"+row.record.cells[\"usage_data_record_count\"].value[i]),filter_value,filter_value.split(\"|\")[0]!=\"`None`\"),outer_value,outer_value.split(\"|\")[1].toNumber()).sort()[-1]==row.record.cells[\"usage_data_record_count\"].value[row.index-row.record.fromRowIndex],value+\"|default\",if(value==\"`None`\",null,value)),value+\"*\")),if(row.record.cells[\"Parent_DOI\"].value.uniques().length()==1,forEach(row.record.cells[\"Parent_DOI\"].value,value,if(row.index-row.record.fromRowIndex==0,value+\"|default\",null))[0],if(filter(row.record.cells[\"Parent_DOI\"].value,value,value!=\"`None`\").uniques().length()==filter(row.record.cells[\"Parent_DOI\"].value,value,value!=\"`None`\").length(),if(forEach(filter(forEachIndex(row.record.cells[\"Parent_DOI\"].value,i,inner_value,inner_value+\"|\"+row.record.cells[\"usage_data_record_count\"].value[i]),filter_value,filter_value.split(\"|\")[0]!=\"`None`\"),outer_value,outer_value.split(\"|\")[1].toNumber()).sort()[-1]==row.record.cells[\"usage_data_record_count\"].value[row.index-row.record.fromRowIndex],value+\"|default\",value),value+\"*\")))",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "Mark defaults and change null placeholders to null values in column ``Parent_DOI`` in records that don't have multiple rows with the same metadata value"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "columnName": "Parent_Proprietary_ID",
        "expression": "grel:if(row.record.cells[\"Parent_Proprietary_ID\"].value.inArray(\"`None`\"),if(row.record.cells[\"Parent_Proprietary_ID\"].value.uniques().length()==1,null,if(filter(row.record.cells[\"Parent_Proprietary_ID\"].value,value,value!=\"`None`\").uniques().length()==filter(row.record.cells[\"Parent_Proprietary_ID\"].value,value,value!=\"`None`\").length(),if(forEach(filter(forEachIndex(row.record.cells[\"Parent_Proprietary_ID\"].value,i,inner_value,inner_value+\"|\"+row.record.cells[\"usage_data_record_count\"].value[i]),filter_value,filter_value.split(\"|\")[0]!=\"`None`\"),outer_value,outer_value.split(\"|\")[1].toNumber()).sort()[-1]==row.record.cells[\"usage_data_record_count\"].value[row.index-row.record.fromRowIndex],value+\"|default\",if(value==\"`None`\",null,value)),value+\"*\")),if(row.record.cells[\"Parent_Proprietary_ID\"].value.uniques().length()==1,forEach(row.record.cells[\"Parent_Proprietary_ID\"].value,value,if(row.index-row.record.fromRowIndex==0,value+\"|default\",null))[0],if(filter(row.record.cells[\"Parent_Proprietary_ID\"].value,value,value!=\"`None`\").uniques().length()==filter(row.record.cells[\"Parent_Proprietary_ID\"].value,value,value!=\"`None`\").length(),if(forEach(filter(forEachIndex(row.record.cells[\"Parent_Proprietary_ID\"].value,i,inner_value,inner_value+\"|\"+row.record.cells[\"usage_data_record_count\"].value[i]),filter_value,filter_value.split(\"|\")[0]!=\"`None`\"),outer_value,outer_value.split(\"|\")[1].toNumber()).sort()[-1]==row.record.cells[\"usage_data_record_count\"].value[row.index-row.record.fromRowIndex],value+\"|default\",value),value+\"*\")))",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "Mark defaults and change null placeholders to null values in column ``Parent_Proprietary_ID`` in records that don't have multiple rows with the same metadata value"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "columnName": "Parent_ISBN",
        "expression": "grel:if(row.record.cells[\"Parent_ISBN\"].value.inArray(\"`None`\"),if(row.record.cells[\"Parent_ISBN\"].value.uniques().length()==1,null,if(filter(row.record.cells[\"Parent_ISBN\"].value,value,value!=\"`None`\").uniques().length()==filter(row.record.cells[\"Parent_ISBN\"].value,value,value!=\"`None`\").length(),if(forEach(filter(forEachIndex(row.record.cells[\"Parent_ISBN\"].value,i,inner_value,inner_value+\"|\"+row.record.cells[\"usage_data_record_count\"].value[i]),filter_value,filter_value.split(\"|\")[0]!=\"`None`\"),outer_value,outer_value.split(\"|\")[1].toNumber()).sort()[-1]==row.record.cells[\"usage_data_record_count\"].value[row.index-row.record.fromRowIndex],value+\"|default\",if(value==\"`None`\",null,value)),value+\"*\")),if(row.record.cells[\"Parent_ISBN\"].value.uniques().length()==1,forEach(row.record.cells[\"Parent_ISBN\"].value,value,if(row.index-row.record.fromRowIndex==0,value+\"|default\",null))[0],if(filter(row.record.cells[\"Parent_ISBN\"].value,value,value!=\"`None`\").uniques().length()==filter(row.record.cells[\"Parent_ISBN\"].value,value,value!=\"`None`\").length(),if(forEach(filter(forEachIndex(row.record.cells[\"Parent_ISBN\"].value,i,inner_value,inner_value+\"|\"+row.record.cells[\"usage_data_record_count\"].value[i]),filter_value,filter_value.split(\"|\")[0]!=\"`None`\"),outer_value,outer_value.split(\"|\")[1].toNumber()).sort()[-1]==row.record.cells[\"usage_data_record_count\"].value[row.index-row.record.fromRowIndex],value+\"|default\",value),value+\"*\")))",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "Mark defaults and change null placeholders to null values in column ``Parent_ISBN`` in records that don't have multiple rows with the same metadata value"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "columnName": "Parent_Print_ISSN",
        "expression": "grel:if(row.record.cells[\"Parent_Print_ISSN\"].value.inArray(\"`None`\"),if(row.record.cells[\"Parent_Print_ISSN\"].value.uniques().length()==1,null,if(filter(row.record.cells[\"Parent_Print_ISSN\"].value,value,value!=\"`None`\").uniques().length()==filter(row.record.cells[\"Parent_Print_ISSN\"].value,value,value!=\"`None`\").length(),if(forEach(filter(forEachIndex(row.record.cells[\"Parent_Print_ISSN\"].value,i,inner_value,inner_value+\"|\"+row.record.cells[\"usage_data_record_count\"].value[i]),filter_value,filter_value.split(\"|\")[0]!=\"`None`\"),outer_value,outer_value.split(\"|\")[1].toNumber()).sort()[-1]==row.record.cells[\"usage_data_record_count\"].value[row.index-row.record.fromRowIndex],value+\"|default\",if(value==\"`None`\",null,value)),value+\"*\")),if(row.record.cells[\"Parent_Print_ISSN\"].value.uniques().length()==1,forEach(row.record.cells[\"Parent_Print_ISSN\"].value,value,if(row.index-row.record.fromRowIndex==0,value+\"|default\",null))[0],if(filter(row.record.cells[\"Parent_Print_ISSN\"].value,value,value!=\"`None`\").uniques().length()==filter(row.record.cells[\"Parent_Print_ISSN\"].value,value,value!=\"`None`\").length(),if(forEach(filter(forEachIndex(row.record.cells[\"Parent_Print_ISSN\"].value,i,inner_value,inner_value+\"|\"+row.record.cells[\"usage_data_record_count\"].value[i]),filter_value,filter_value.split(\"|\")[0]!=\"`None`\"),outer_value,outer_value.split(\"|\")[1].toNumber()).sort()[-1]==row.record.cells[\"usage_data_record_count\"].value[row.index-row.record.fromRowIndex],value+\"|default\",value),value+\"*\")))",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "Mark defaults and change null placeholders to null values in column ``Parent_Print_ISSN`` in records that don't have multiple rows with the same metadata value"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "columnName": "Parent_Online_ISSN",
        "expression": "grel:if(row.record.cells[\"Parent_Online_ISSN\"].value.inArray(\"`None`\"),if(row.record.cells[\"Parent_Online_ISSN\"].value.uniques().length()==1,null,if(filter(row.record.cells[\"Parent_Online_ISSN\"].value,value,value!=\"`None`\").uniques().length()==filter(row.record.cells[\"Parent_Online_ISSN\"].value,value,value!=\"`None`\").length(),if(forEach(filter(forEachIndex(row.record.cells[\"Parent_Online_ISSN\"].value,i,inner_value,inner_value+\"|\"+row.record.cells[\"usage_data_record_count\"].value[i]),filter_value,filter_value.split(\"|\")[0]!=\"`None`\"),outer_value,outer_value.split(\"|\")[1].toNumber()).sort()[-1]==row.record.cells[\"usage_data_record_count\"].value[row.index-row.record.fromRowIndex],value+\"|default\",if(value==\"`None`\",null,value)),value+\"*\")),if(row.record.cells[\"Parent_Online_ISSN\"].value.uniques().length()==1,forEach(row.record.cells[\"Parent_Online_ISSN\"].value,value,if(row.index-row.record.fromRowIndex==0,value+\"|default\",null))[0],if(filter(row.record.cells[\"Parent_Online_ISSN\"].value,value,value!=\"`None`\").uniques().length()==filter(row.record.cells[\"Parent_Online_ISSN\"].value,value,value!=\"`None`\").length(),if(forEach(filter(forEachIndex(row.record.cells[\"Parent_Online_ISSN\"].value,i,inner_value,inner_value+\"|\"+row.record.cells[\"usage_data_record_count\"].value[i]),filter_value,filter_value.split(\"|\")[0]!=\"`None`\"),outer_value,outer_value.split(\"|\")[1].toNumber()).sort()[-1]==row.record.cells[\"usage_data_record_count\"].value[row.index-row.record.fromRowIndex],value+\"|default\",value),value+\"*\")))",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "Mark defaults and change null placeholders to null values in column ``Parent_Online_ISSN`` in records that don't have multiple rows with the same metadata value"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "columnName": "Parent_URI",
        "expression": "grel:if(row.record.cells[\"Parent_URI\"].value.inArray(\"`None`\"),if(row.record.cells[\"Parent_URI\"].value.uniques().length()==1,null,if(filter(row.record.cells[\"Parent_URI\"].value,value,value!=\"`None`\").uniques().length()==filter(row.record.cells[\"Parent_URI\"].value,value,value!=\"`None`\").length(),if(forEach(filter(forEachIndex(row.record.cells[\"Parent_URI\"].value,i,inner_value,inner_value+\"|\"+row.record.cells[\"usage_data_record_count\"].value[i]),filter_value,filter_value.split(\"|\")[0]!=\"`None`\"),outer_value,outer_value.split(\"|\")[1].toNumber()).sort()[-1]==row.record.cells[\"usage_data_record_count\"].value[row.index-row.record.fromRowIndex],value+\"|default\",if(value==\"`None`\",null,value)),value+\"*\")),if(row.record.cells[\"Parent_URI\"].value.uniques().length()==1,forEach(row.record.cells[\"Parent_URI\"].value,value,if(row.index-row.record.fromRowIndex==0,value+\"|default\",null))[0],if(filter(row.record.cells[\"Parent_URI\"].value,value,value!=\"`None`\").uniques().length()==filter(row.record.cells[\"Parent_URI\"].value,value,value!=\"`None`\").length(),if(forEach(filter(forEachIndex(row.record.cells[\"Parent_URI\"].value,i,inner_value,inner_value+\"|\"+row.record.cells[\"usage_data_record_count\"].value[i]),filter_value,filter_value.split(\"|\")[0]!=\"`None`\"),outer_value,outer_value.split(\"|\")[1].toNumber()).sort()[-1]==row.record.cells[\"usage_data_record_count\"].value[row.index-row.record.fromRowIndex],value+\"|default\",value),value+\"*\")))",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "Mark defaults and change null placeholders to null values in column ``Parent_URI`` in records that don't have multiple rows with the same metadata value"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [
                {
                    "type": "list",
                    "name": "Resource_Name",
                    "expression": "grel:value.endsWith(\"*\")",
                    "columnName": "Resource_Name",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": true,
                                "l": "true"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                }
            ],
            "mode": "record-based"
        },
        "columnName": "Resource_Name",
        "expression": "grel:if(value.toUppercase()==\"LIBRARY JOURNAL*\",if(value==\"Library Journal*\",if(row.index-row.record.fromRowIndex==0,value.substring(0,-1)+\"|default\",null),value.substring(0,-1)),if(value.toUppercase()==\"LIBRARY CALENDAR*\",if(value==\"Library Calendar*\",value.substring(0,-1),if(row.index-row.record.fromRowIndex==0,value.substring(0,-1)+\"|default\",null)),if(row.index-row.record.fromRowIndex==0,value.substring(0,-1)+\"|default\",if(or(row.index-row.record.fromRowIndex==2,row.index-row.record.fromRowIndex==3),value.substring(0,-1),null))))",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "Manually mark defaults and change null placeholders to null for unadjusted records remaining in column ``Resource_Name``"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [
                {
                    "type": "list",
                    "name": "ISBN",
                    "expression": "grel:value.endsWith(\"*\")",
                    "columnName": "ISBN",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": true,
                                "l": "true"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                }
            ],
            "mode": "record-based"
        },
        "columnName": "ISBN",
        "expression": "grel:if(value==\"0254-8038*\",value.substring(0,-1),if(row.index-row.record.fromRowIndex==0,value.substring(0,-1)+\"|default\",null))",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "Manually mark defaults and change null placeholders to null for unadjusted records remaining in column ``ISBN``"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [
                {
                    "type": "list",
                    "name": "Print_ISSN",
                    "expression": "grel:value.endsWith(\"*\")",
                    "columnName": "Print_ISSN",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": true,
                                "l": "true"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                }
            ],
            "mode": "record-based"
        },
        "columnName": "Print_ISSN",
        "expression": "grel:if(row.index-row.record.fromRowIndex==0,row.record.cells[\"Print_ISSN\"].value[0].substring(0,-1)+\"|default\",null)",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "Manually mark defaults and change null placeholders to null for unadjusted records remaining in column ``Print_ISSN``"
    },
    {
        "op": "core/column-reorder",
        "columnNames": [
            "resource_ID",
            "Resource_Name",
            "DOI",
            "ISBN",
            "Print_ISSN",
            "Online_ISSN",
            "Authors",
            "Parent_Title",
            "Parent_Authors",
            "Parent_Publication_Date",
            "Parent_Article_Version",
            "Parent_Data_Type",
            "Parent_DOI",
            "Parent_Proprietary_ID",
            "Parent_ISBN",
            "Parent_Print_ISSN",
            "Parent_Online_ISSN",
            "Parent_URI",
            "usage_data_ID",
            "resourcePlatforms",
            "usageData"
        ],
        "description": "Reorder columns"
    },
    {
        "op": "core/row-removal",
        "engineConfig": {
            "facets": [
                {
                    "type": "list",
                    "name": "resource_ID",
                    "expression": "grel:filter(row.columnNames,cn,isNonBlank(cells[cn].value)).length()==0",
                    "columnName": "resource_ID",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": true,
                                "l": "true"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                }
            ],
            "mode": "row-based"
        },
        "description": "Remove completely blank rows"
    },
    {
        "op": "core/transpose-columns-into-rows",
        "startColumnName": "Resource_Name",
        "columnCount": 17,
        "ignoreBlankCells": true,
        "fillDown": false,
        "separator": null,
        "keyColumnName": "metadata_field",
        "valueColumnName": "metadata_value",
        "description": "Pivot all columns with resource metadata into two columns, one named ``metadata_field`` with the column name and the other named ``metadata_value`` with the data value"
    },
    {
        "op": "core/column-addition",
        "engineConfig": {
            "facets": [
                {
                    "type": "list",
                    "name": "metadata_value",
                    "expression": "grel:value.endsWith(\"|default\")",
                    "columnName": "metadata_value",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": true,
                                "l": "true"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                }
            ],
            "mode": "row-based"
        },
        "baseColumnName": "metadata_value",
        "expression": "grel:true",
        "onError": "set-to-blank",
        "newColumnName": "default",
        "columnInsertIndex": 3,
        "description": "Create column ``default`` containing Boolean `true` in rows with a default metadata value"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [
                {
                    "type": "list",
                    "name": "metadata_value",
                    "expression": "grel:value.endsWith(\"|default\")",
                    "columnName": "metadata_value",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": true,
                                "l": "true"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                }
            ],
            "mode": "row-based"
        },
        "columnName": "metadata_value",
        "expression": "grel:value.substring(0,-1*length(\"|default\"))",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "Remove the default tag from values in column ``metadata_value``"
    },
    {
        "op": "core/fill-down",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "columnName": "resource_ID",
        "description": "Fill down cells in column ``resource_ID``"
    },
    {
        "op": "core/column-move",
        "columnName": "resource_ID",
        "index": 3,
        "description": "Move column ``resource_ID`` after the resourceMetadata relation fields"
    },
    {
        "op": "core/column-addition",
        "engineConfig": {
            "facets": [
                {
                    "type": "list",
                    "name": "metadata_field",
                    "expression": "isBlank(value)",
                    "columnName": "metadata_field",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": false,
                                "l": "false"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                }
            ],
            "mode": "row-based"
        },
        "baseColumnName": "metadata_field",
        "expression": "grel:row.record.index",
        "onError": "set-to-blank",
        "newColumnName": "resource_metadata_ID",
        "columnInsertIndex": 0,
        "description": "Create column resource_metadata_ID at index 1 based on column metadata_field using expression grel:row.record.index"
    }
]